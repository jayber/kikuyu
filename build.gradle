apply plugin: 'java'

ext {

    applicationName = "kikuyu"
    hostName = "a-devapp1"
    username = { "jbown$it" }
    password = { "darw1nd$it" }

    applicationDeployDirPath = { "/apps1/instance_d$it/plc/jboss-eap-4.2-web01/jboss-as/server/plcapps/deploy/${applicationName}.war" }
    scpPath = { envNo -> "${username(envNo)}:${password(envNo)}@$hostName:${applicationDeployDirPath(envNo)}" }

    targetFile = "$rootDir/target/${applicationName}.war"
    remoteTargetFile = { envNo -> "${applicationDeployDirPath(envNo)}/${applicationName}.war" }
    applicationUrl = { envNo -> "http://d${envNo}-infra.dev.practicallaw.com:8080/$applicationName" }

}

task doBuild(type: Exec) {

    commandLine 'cmd', '/c', "grails test war", targetFile

    standardOutput = System.out
}

task deploy(dependsOn: doBuild) << {

    println "*** IMPORTANT: make sure you have stopped application server before deploying this application"

    checkVariables()

    defineAntTasks()

    emptyRemoteDirectory(applicationDeployDirPath(envNo))

    uploadFile(targetFile, scpPath(envNo))

    unzipFile(remoteTargetFile(envNo), applicationDeployDirPath(envNo))

    deleteFile(remoteTargetFile(envNo))

    println "*** SUCCESS *** Start the server. You can access application by '${applicationUrl(envNo)}' "

}

private checkVariables() {
    if (!hasProperty('envNo')) {
        throw new RuntimeException("No 'envNo' property found. This is the number of the development environment to use" +
                " (e.g. the '56' of 'd56');" +
                " it must be set to upload and unzip the distribution. Set it using -PenvNo=xx command line argument," +
                " or a gradle.properties file.")
    }

    println "*** Your environment number is set to: $envNo"

    if (!System.getProperty('http.proxyHost')) {
        println "WARNING: no proxy host config found. If you need to use a proxy to reach the internet the deploy may fail." +
                " Use -D arguments for JVM proxy values or create a gradle.properties file with entries like 'systemProp.http.proxyHost'."
    }
}

private emptyRemoteDirectory(String deployDir) {

    def removeAllContents = "rm -f -r " + deployDir
    def createIfDoesNotExist = "mkdir -p " + deployDir

    runServerCommand(removeAllContents)
    runServerCommand(createIfDoesNotExist)

}

private deleteFile(String filePath) {
    def delete = "rm -f " + filePath
    runServerCommand(delete)
}

private void uploadFile(String fileToDeploy, String remoteDirectory) {
    ant.scopy(file: fileToDeploy, todir: remoteDirectory, trust: true)
    println "File: $fileToDeploy uploaded to: $remoteDirectory"
}

private void unzipFile(String filePath, String unzipDirectory) {
    def command = "unzip -o ${filePath} -d ${unzipDirectory}/"
    runServerCommand(command)
}

private void defineAntTasks() {
    ant.taskdef(name: 'scopy',
            classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
            classpath: configurations.antScp.asPath)

    ant.taskdef(name: 'ssh',
            classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
            classpath: configurations.antScp.asPath)
}

private void runServerCommand(command) {
    println "SSH command: $command"
    ant.ssh(host: hostName, username: username(envNo), password: password(envNo), trust: 'yes', command: command, outputproperty: 'outprop')
    println ant.outprop
    ant.outprop = ""
}

repositories {
    mavenCentral()
}

configurations {
    antScp
}

dependencies {
    antScp("org.apache.ant:ant-jsch:1.8.3")
}